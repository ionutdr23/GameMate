services:
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.13.7-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - microservice-network

  eureka-server:
    container_name: eureka-server
    build:
      context: ./backend/eureka-server
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  user-service-db:
    container_name: user-service-db
    image: postgres:15
    environment:
      POSTGRES_USER: ${USER_DB_USER}
      POSTGRES_PASSWORD: ${USER_DB_PASSWORD}
      POSTGRES_DB: ${USER_DB}
    volumes:
      - user_db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - microservice-network

  social-service-db:
    container_name: social-service-db
    image: mongo:8.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${SOCIAL_DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${SOCIAL_DB_PASSWORD}
      MONGO_INITDB_DATABASE: ${SOCIAL_DB}
    volumes:
      - social_db_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - microservice-network

  user-service:
    container_name: user-service
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
      SPRING_DATASOURCE_URL: ${USER_DB_URL}
      SPRING_DATASOURCE_USERNAME: ${USER_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${USER_DB_PASSWORD}
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: ${AUTH0_ISSUER}
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_DEFAULT_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
      DO_SPACES_KEY: ${DO_SPACES_KEY}
      DO_SPACES_SECRET: ${DO_SPACES_SECRET}
      DO_SPACES_REGION: ${DO_SPACES_REGION}
      DO_SPACES_ENDPOINT: ${DO_SPACES_ENDPOINT}
      DO_SPACES_BUCKET: ${DO_SPACES_BUCKET}
    depends_on:
      - eureka-server
      - rabbitmq
      - user-service-db
    ports:
      - "8081:8080"
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  social-service:
    container_name: social-service
    build:
      context: ./backend/social-service
      dockerfile: Dockerfile
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
      SPRING_DATA_MONGODB_URI: mongodb://${SOCIAL_DB_USER}:${SOCIAL_DB_PASSWORD}@${SOCIAL_DB_URL}/${SOCIAL_DB}?authSource=admin
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: ${AUTH0_ISSUER}
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_DEFAULT_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
    depends_on:
      - eureka-server
      - rabbitmq
      - social-service-db
    ports:
      - "8082:8080"
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  gateway-service:
    container_name: gateway-service
    build:
      context: ./backend/gateway-service
      dockerfile: Dockerfile
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: ${AUTH0_ISSUER}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      USER_SERVICE_URL: ${GATEWAY_USER_SERVICE_URL}
      SOCIAL_SERVICE_URL: ${GATEWAY_SOCIAL_SERVICE_URL}
    depends_on:
      - eureka-server
      - user-service
      - social-service
    ports:
      - "8080:8080"
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      VITE_AUTH0_DOMAIN: ${VITE_AUTH0_DOMAIN}
      VITE_AUTH0_CLIENT_ID: ${VITE_AUTH0_CLIENT_ID}
      VITE_API_URL: ${VITE_API_URL}
    depends_on:
      - gateway-service
    ports:
      - "3000:3000"
    networks:
      - microservice-network

volumes:
  social_db_data:
  user_db_data:

networks:
  microservice-network:
    driver: bridge
